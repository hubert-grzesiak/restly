generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId
  createdAt               DateTime?              @default(now())
  updatedAt               DateTime?              @updatedAt

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts     Account[]
  messages     Message[]
  Favorite     Favorite[]
  reservations Reservation[]
  reviews      Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime? @default(now())
  name          String?
  isGroup       Boolean?

  messageIds String[]  @db.ObjectId
  messages   Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Facilities {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

model Facility {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  public_id   String?
  description String
  isMain      Boolean
  urls        String[]
  propertyId  String   @db.ObjectId
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Price {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String @db.ObjectId
  from       String
  to         String
  price      Float

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Property {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  country          String
  city             String
  street           String
  geometry         Geometry? @relation(fields: [geometryId], references: [id])
  name             String
  description      String
  numberOfBedrooms String
  postalCode       String
  houseNumber      String
  apartmentNumber  String
  minimumStay      String
  maximumStay      String
  maxPeople        String
  ownerId          String
  checkInTime      String?
  checkOutTime     String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt


  prices      Price[]
  facility    Facility[]
  images      Image[]
  Favorite    Favorite[]
  Reservation Reservation[]
  Review      Review[]

  geometryId String @unique @db.ObjectId
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model Geometry {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  type        String     @default("Point")
  coordinates Float[]
  Property    Property[]
}

model Reservation {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String    @db.ObjectId
  userId     String    @db.ObjectId
  stripeId  String?   @unique
  guests     Int
  dateFrom   String
  dateTo     String
  price      Float
  createdAt  DateTime? @default(now())

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId, dateFrom, dateTo], name: "reservation_date_range_index")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String   @db.ObjectId
  userId     String   @db.ObjectId
  rating     Int
  body       String
  createdAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId, userId], name: "unique_review")
}